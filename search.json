[
  {
    "objectID": "website/index.html",
    "href": "website/index.html",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "",
    "text": "viewof username = secret(\"apiKey\", {\n  description:\n    \"This is your username for the API, it is only available to you!\",\n  submit: \"Set username\"\n})\n\n\n\n\n\n\n\nviewof password = secret(\"apiKey\", {\n  description:\n    \"This is your password for the API, it is only available to you!\",\n  submit: \"Set password\"\n})\n\n\n\n\n\n\n\nviewof csvfile = Inputs.file({\n  label: md`__Observations to evaluate__ üìÅ ([Example here](https://raw.githubusercontent.com/ThomasFaria/codif-ape-API/main/website/exemples/exemple.csv))`,\n  accept: \".csv\",\n  required: true\n})"
  },
  {
    "objectID": "website/index.html#connexion-√†-lapi-et-ajout-des-donn√©es",
    "href": "website/index.html#connexion-√†-lapi-et-ajout-des-donn√©es",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "",
    "text": "viewof username = secret(\"apiKey\", {\n  description:\n    \"This is your username for the API, it is only available to you!\",\n  submit: \"Set username\"\n})\n\n\n\n\n\n\n\nviewof password = secret(\"apiKey\", {\n  description:\n    \"This is your password for the API, it is only available to you!\",\n  submit: \"Set password\"\n})\n\n\n\n\n\n\n\nviewof csvfile = Inputs.file({\n  label: md`__Observations to evaluate__ üìÅ ([Example here](https://raw.githubusercontent.com/ThomasFaria/codif-ape-API/main/website/exemples/exemple.csv))`,\n  accept: \".csv\",\n  required: true\n})"
  },
  {
    "objectID": "website/index.html#distribution-des-indices-de-confiances",
    "href": "website/index.html#distribution-des-indices-de-confiances",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "Distribution des indices de confiances",
    "text": "Distribution des indices de confiances\n\ngrid = await html`&lt;div style=\"\n              background: #fff;\n              margin: 0;\n              border: none ;\n              display: grid;\n              width: ${screen.width};\n              grid-template-areas: \n                'a b c'\n                'd d d'\n                ;\n              grid-gap: 10px;\n            \"&gt;\n              &lt;div name=\"a\" style=\"grid-area: a; position: relative;\"&gt;${viewof quantile}&lt;/div&gt;\n              &lt;div name=\"b\" style=\"grid-area: b; position: relative;\"&gt;Accuracy: ${Accuracy}&lt;/div&gt;\n              &lt;div name=\"c\" style=\"grid-area: c; position: relative;\"&gt;Seuil: ${Seuil}&lt;/div&gt;\n              &lt;div name=\"d\" style=\"grid-area: d; position: relative;\"&gt;${distrib}&lt;/div&gt;\n            &lt;/div&gt;`\n\n\n\n\n\n\n\nviewof quantile = slider({\n  min: 0,\n  max: 100,\n  step: 1,\n  value: 80,\n  format: (v) =&gt; `${v}%`,\n  description: \"Taux de classification automatique\"\n})\n\n\n\n\n\n\n\ndistrib = Plot.plot({\n  round: true,\n  width: screen.width * 0.7,\n  color: { scheme: \"BuRd\", legend: true },\n  marks: [\n    Plot.rectY(\n      processed_response,\n      Plot.binX(\n        { y: \"count\" },\n        { x: \"IC\", fill: \"Result\", mixBlendMode: \"multiply\", tip: true }\n      )\n    ),\n    Plot.ruleY([0]),\n    Plot.ruleX([Seuil], { strokeWidth: 2, tip: true })\n  ]\n})\n\n\n\n\n\n\n\nSeuil = Math.round(\n  d3.quantile(\n    processed_response.map((d) =&gt; d.IC),\n    1 - quantile / 100\n  ) * 100\n) / 100\n\n\n\n\n\n\n\nAccuracy = Math.round(d3.mean(subset.map((d) =&gt; d.IC)) * 10000) / 100\n\n\n\n\n\n\n\nInputs.table(processed_response)"
  },
  {
    "objectID": "website/index.html#liste-des-mauvaises-predictions",
    "href": "website/index.html#liste-des-mauvaises-predictions",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "Liste des mauvaises predictions",
    "text": "Liste des mauvaises predictions\n\nWrongPredictions = Inputs.table(subset.filter((d) =&gt; 1 - d.Result))\n\n\n\n\n\n\n\n\ndata = db.query(\n  `\nSELECT text_description, type_, nature, surface, event, code\nFROM liasses\n`\n)\n\n\n\n\n\n\n\ntransformedData = data.reduce((acc, obj) =&gt; {\n  for (const [key, value] of Object.entries(obj)) {\n    if (!acc.hasOwnProperty(key)) {\n      acc[key] = [];\n    }\n    acc[key].push(value);\n  }\n  return acc;\n}, {})\n\n\n\n\n\n\n\ndb = DuckDBClient.of({\n  liasses: await csvfile.csv()\n})\n\n\n\n\n\n\n\nprocessed_response = Object.keys(response.IC).map((key) =&gt; ({\n  IC: response.IC[key] &gt; 1 ? 1 - 1e-16 : response.IC[key],\n  Probability: response.Probability[key],\n  Prediction: response.Prediction[key],\n  Code: response.Code[key],\n  Result: response.Result[key],\n  Lib: response.Lib[key]\n}))\n\n\n\n\n\n\n\nresponse = queryBatchApi(username, password, data)\n\n\n\n\n\n\n\nsubset = processed_response.filter((d) =&gt; d.IC &gt; Seuil)\n\n\n\n\n\n\n\n\nasync function queryBatchApi(username, password, data) {\n  const url = \"https://codification-ape.lab.sspcloud.fr/evaluation\";\n\n  // Create the request body\n  const request_body = data.reduce((acc, obj) =&gt; {\n    for (const [key, value] of Object.entries(obj)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = [];\n      }\n      acc[key].push(value);\n    }\n    return acc;\n  }, {});\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Basic ${btoa(`${username}:${password}`)}`\n    },\n    body: JSON.stringify(request_body)\n  });\n\n  if (response.ok) {\n    return response.json();\n  } else if (response.status === 400) {\n    console.log((await response.json()).detail);\n  } else {\n    console.log(\"Error occurred while querying the API.\");\n    return response;\n  }\n}\n\n\n\n\n\n\n\n\nimport { secret } from \"@tmcw/secret\"\n\n\n\n\n\n\n\nimport {slider} from \"@jashkenas/inputs\""
  },
  {
    "objectID": "website/methodology.html",
    "href": "website/methodology.html",
    "title": "Methodology",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  },
  {
    "objectID": "website/methodology.html#quarto",
    "href": "website/methodology.html#quarto",
    "title": "Methodology",
    "section": "",
    "text": "Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org."
  }
]