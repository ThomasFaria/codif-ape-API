[
  {
    "objectID": "website/lmnp.html",
    "href": "website/lmnp.html",
    "title": "Analyse des loueurs meubl√©s non professionnel",
    "section": "",
    "text": "grid = await html`&lt;div style=\"\n              background: #fff;\n              margin: 10;\n              border: none ;\n              display: grid;\n              width: ${screen.width};\n              grid-template-areas:\n                'a b'\n                'c c'\n                'd d'\n                ;\n              grid-gap: 10px;\n            \"&gt;\n              &lt;div name=\"a\" style=\"grid-area: a; position: relative;\"&gt;${viewof Seuil}&lt;/div&gt;\n              &lt;div name=\"b\" style=\"grid-area: b; position: relative;\"&gt;${viewof selection}&lt;/div&gt;\n              &lt;div name=\"c\" style=\"grid-area: c; position: relative;\"&gt;${viewof var_annexes}&lt;/div&gt;\n              &lt;div name=\"d\" style=\"grid-area: d; position: relative;\"&gt;${viewof table_data}&lt;/div&gt;\n            &lt;/div&gt;`\n\n\n\n\n\n\n\nviewof Seuil = Inputs.range([0, 1], {label: \"Seuil choisi\", step: 0.01, value: 0.8})\n\n\n\n\n\n\n\nviewof selection = Inputs.select([\"Tous\", \"Bonnes pr√©dictions\", \"Erreurs reprises\", \"Erreurs probl√©matiques\"], {label: \"R√©sultats des LMNP\"})\n\n\n\n\n\n\n\nviewof var_annexes = Inputs.toggle({label: \"Variables annexes\", values: [true, false]})\n\n\n\n\n\n\n\nviewof table_data = Inputs.table(selector(transpose(data_lmnp), selection), {\n    rows: 17,\n    columns: var_annexes\n  ? [\"text_description\", \"type_\", \"Pr√©diction\", \"Score\", \"nature\", \"surface\", \"event\"]\n  : [\"text_description\", \"type_\", \"Pr√©diction\", \"Score\"],\n  header: {\n    text_description: \"Libell√©\",\n    type_: \"Type\",\n    nature: \"Nature\",\n    surface: \"Surface\",\n    event : \"√âv√®nement\"\n  }, \n  format: {\n    \"Score\": d =&gt; get_background(d)\n  }\n})\n\n\n\n\n\n\n\nfunction get_background(d) {\n    const color = d &gt; Seuil ? \"#19975d\" : \"#f15060\"\n\n  \n  return html`&lt;div style=\"\n    background: ${color.toLocaleString(\"en\")};\n    width: 95%;\n    float: center;\n    border-radius:15px;\n    padding-left: 10px;\n    padding-right: 10px;\n    margin: 0 auto; /* Center the div horizontally */\n    text-align: center; /* Center the text within the div */\n    \"&gt;\n    ${Math.round(d * 10000) / 10000}`;\n}\n\n\n\n\n\n\n\n\nfunction selector(data, selector) {\n    let b;\n    switch (selector) {\n        case \"Tous\":\n            b = data;\n        case \"Bonnes pr√©dictions\":\n            b = data.filter(d =&gt; d.Error === false);\n            break;\n        case \"Erreurs reprises\":\n            b = data.filter(d =&gt; d.Error === true && d.Score &lt;= Seuil);\n            break;\n        case \"Erreurs probl√©matiques\":\n            b = data.filter(d =&gt; d.Error === true && d.Score &gt; Seuil);\n            break;\n        default:\n            break;\n    }\n    return b;\n}\n\n\n\n\n\n\n\nimport {slider} from \"@jashkenas/inputs\""
  },
  {
    "objectID": "website/eval-liasses.html",
    "href": "website/eval-liasses.html",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "",
    "text": "viewof username = Inputs.password({label: html`&lt;b&gt;Set username&lt;/b&gt;`, value: \"\"})\n\n\n\n\n\n\n\nviewof password = Inputs.password({label: html`&lt;b&gt;Set password&lt;/b&gt;`, value: \"\"})\n\n\n\n\n\n\n\nviewof csvfile = Inputs.file({\n  label: md`__Observations to evaluate__ üìÅ ([Example here](https://raw.githubusercontent.com/ThomasFaria/codif-ape-API/main/website/exemples/exemple.csv))`,\n  accept: \".csv\",\n  required: true\n})"
  },
  {
    "objectID": "website/eval-liasses.html#connexion-√†-lapi-et-ajout-des-donn√©es",
    "href": "website/eval-liasses.html#connexion-√†-lapi-et-ajout-des-donn√©es",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "",
    "text": "viewof username = Inputs.password({label: html`&lt;b&gt;Set username&lt;/b&gt;`, value: \"\"})\n\n\n\n\n\n\n\nviewof password = Inputs.password({label: html`&lt;b&gt;Set password&lt;/b&gt;`, value: \"\"})\n\n\n\n\n\n\n\nviewof csvfile = Inputs.file({\n  label: md`__Observations to evaluate__ üìÅ ([Example here](https://raw.githubusercontent.com/ThomasFaria/codif-ape-API/main/website/exemples/exemple.csv))`,\n  accept: \".csv\",\n  required: true\n})"
  },
  {
    "objectID": "website/eval-liasses.html#distribution-des-indices-de-confiances",
    "href": "website/eval-liasses.html#distribution-des-indices-de-confiances",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "Distribution des indices de confiances",
    "text": "Distribution des indices de confiances\n\ngrid = await html`&lt;div style=\"\n              background: #fff;\n              margin: 0;\n              border: none ;\n              display: grid;\n              width: ${screen.width};\n              grid-template-areas: \n                'a b c'\n                'd d d'\n                'e e e'\n                ;\n              grid-gap: 10px;\n            \"&gt;\n              &lt;div name=\"a\" style=\"grid-area: a; position: relative;\"&gt;${viewof quantile}&lt;/div&gt;\n              &lt;div name=\"b\" style=\"grid-area: b; position: relative;\"&gt;&lt;div class=\"textstyled\"&gt;Accuracy: ${Accuracy}&lt;/div&gt;&lt;/div&gt;\n              &lt;div name=\"c\" style=\"grid-area: c; position: relative;\"&gt;&lt;div class=\"textstyled\"&gt;Seuil: ${Seuil}&lt;/div&gt;&lt;/div&gt;\n              &lt;div name=\"d\" style=\"grid-area: d; position: relative;\"&gt;${distrib}&lt;/div&gt;\n              &lt;div name=\"e\" style=\"grid-area: e; position: relative;\"&gt;${distrib_adjusted}&lt;/div&gt;\n            &lt;/div&gt;`"
  },
  {
    "objectID": "website/eval-liasses.html#analyse-des-erreurs",
    "href": "website/eval-liasses.html#analyse-des-erreurs",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "Analyse des erreurs",
    "text": "Analyse des erreurs\n\nPlot.barY(count_errors.slice(0, 15), {\n  x: \"value\",\n  y: \"frequency\",\n  sort: { x: \"-y\" },\n  tip: true\n}).plot()\n\n\n\n\n\n\n\nviewof search = Inputs.search(subset.filter((d) =&gt; 1 - d.Result))\n\n\n\n\n\n\n\nWrongPredictions = Inputs.table(search)"
  },
  {
    "objectID": "website/eval-liasses.html#impact-du-seuil-de-reprise-sur-la-performance-et-le-taux",
    "href": "website/eval-liasses.html#impact-du-seuil-de-reprise-sur-la-performance-et-le-taux",
    "title": "Evaluation d‚Äôun mod√®le",
    "section": "Impact du seuil de reprise sur la performance et le taux",
    "text": "Impact du seuil de reprise sur la performance et le taux\n\ngrid2 = await html`&lt;div style=\"\n              background: #fff;\n              margin: 0;\n              border: none ;\n              display: grid;\n              width: ${screen.width};\n              grid-template-areas: \n                'a'\n                'b'\n                'c'\n                ;\n              grid-gap: 10px;\n            \"&gt;\n              &lt;div name=\"a\" style=\"grid-area: a; position: relative;\"&gt;${codif_seuil}&lt;/div&gt;\n              &lt;div name=\"b\" style=\"grid-area: b; position: relative;\"&gt;${acc_seuil}&lt;/div&gt;\n              &lt;div name=\"c\" style=\"grid-area: c; position: relative;\"&gt;${acc_codif}&lt;/div&gt;\n            &lt;/div&gt;`\n\n\n\n\n\n\n\n\nviewof quantile = Inputs.range([0, 100], {label: \"Taux de classification automatique\", step: 1, value: 80})\n\n\n\n\n\n\n\ndistrib = Plot.plot({\n  round: true,\n  width: screen.width * 0.7,\n  color: { scheme: \"BuRd\", legend: true },\n  marks: [\n    Plot.rectY(\n      processed_response,\n      Plot.binX(\n        { y: \"count\" },\n        { x: \"IC\", fill: \"Result\", mixBlendMode: \"multiply\", tip: true }\n      )\n    ),\n    Plot.ruleY([0]),\n    Plot.ruleX([Seuil], { strokeWidth: 2, tip: true })\n  ]\n})\n\n\n\n\n\n\n\ndistrib_adjusted = Plot.plot({\n  width: screen.width * 0.7,\n  y: { percent: true },\n  color: { scheme: \"BuRd\", legend: true },\n  marks: [\n    Plot.rectY(\n      processed_response,\n      Plot.normalizeY(\n        \"sum\", // normalize each series by the sum per series\n        Plot.binX(\n          { y2: \"count\" }, // disable implicit stack transform\n          { x: \"IC\", fill: \"Result\", mixBlendMode: \"multiply\", tip: true }\n        )\n      )\n    ),\n    Plot.ruleY([0]),\n    Plot.ruleX([Seuil], { strokeWidth: 2, tip: true })\n  ]\n})\n\n\n\n\n\n\n\nSeuil = round(\n  d3.quantile(\n    processed_response.map((d) =&gt; d.IC),\n    1 - quantile / 100\n  ),\n  2\n)\n\n\n\n\n\n\n\nAccuracy = round(d3.mean(subset.map((d) =&gt; d.Result)) * 100, 2)\n\n\n\n\n\n\n\ncodif_seuil = Plot.plot({\n  grid: true,\n  y: {\n    label: \"‚Üë Taux de classification automatique (%)\",\n    percent: true\n  },\n  x: {\n    label: \"‚Üí Seuil choisi\"\n  },\n  marks: [\n    Plot.line(ic_tx_classif, {\n      x: \"seuils\",\n      y: \"codif_auto\",\n      stroke: \"black\",\n      strokeWidth: 2\n    }),\n    Plot.tip(\n      ic_tx_classif,\n      Plot.pointer({\n        x: \"seuils\",\n        y: \"codif_auto\",\n        title: (d) =&gt; `Accuracy : ${round(d.accuracies, 2)}\\nSeuil : ${round(\n          d.seuils,\n          2\n        )}\\nTaux classification automatique: \n${round(d.codif_auto * 100, 2)} %`\n      })\n    ),\n    Plot.tip([`Seuil √† 0.6`], {\n      x: ic_tx_classif[60].seuils,\n      y: ic_tx_classif[60].codif_auto,\n      anchor: \"bottom\"\n    })\n  ],\n  color: { legend: true }\n})\n\n\n\n\n\n\n\nacc_seuil = Plot.plot({\n  grid: true,\n  y: {\n    label: \"‚Üë Accuracy (%)\",\n    percent: true\n  },\n  x: {\n    label: \"‚Üí Seuil choisi\"\n  },\n  marks: [\n    Plot.line(ic_tx_classif, {\n      x: \"seuils\",\n      y: \"accuracies\",\n      stroke: \"black\",\n      strokeWidth: 2\n    }),\n    Plot.tip(\n      ic_tx_classif,\n      Plot.pointer({\n        x: \"seuils\",\n        y: \"accuracies\",\n        title: (d) =&gt; `Accuracy : ${round(d.accuracies, 2)}\\nSeuil : ${round(\n          d.seuils,\n          2\n        )}\\nTaux classification automatique: \n${round(d.codif_auto * 100, 2)} %`\n      })\n    ),\n    Plot.tip([`Seuil √† 0.6`], {\n      x: ic_tx_classif[60].seuils,\n      y: ic_tx_classif[60].accuracies,\n      anchor: \"bottom\"\n    })\n  ],\n  color: { legend: true }\n})\n\n\n\n\n\n\n\nacc_codif = Plot.plot({\n  grid: true,\n  y: {\n    label: \"‚Üë Accuracy (%)\",\n    percent: true\n  },\n  x: {\n    label: \"‚Üí Taux de classification automatique (%)\",\n    percent: true\n  },\n  marks: [\n    Plot.line(ic_tx_classif, {\n      x: \"codif_auto\",\n      y: \"accuracies\",\n      stroke: \"black\",\n      strokeWidth: 2\n    }),\n    Plot.tip(\n      ic_tx_classif,\n      Plot.pointer({\n        x: \"codif_auto\",\n        y: \"accuracies\",\n        title: (d) =&gt; `Accuracy : ${round(d.accuracies, 2)}\\nSeuil : ${round(\n          d.seuils,\n          2\n        )}\\nTaux classification automatique: \n${round(d.codif_auto * 100, 2)} %`\n      })\n    ),\n    Plot.tip([`Seuil √† 0.6`], {\n      x: ic_tx_classif[60].codif_auto,\n      y: ic_tx_classif[60].accuracies,\n      anchor: \"bottom\"\n    })\n  ],\n  color: { legend: true }\n})\n\n\n\n\n\n\n\nic_tx_classif = {\n  const newArray = [];\n  for (let i = 0; i &lt;= 1.01; i += 0.01) {\n    let seuil = round(i, 2);\n    newArray.push({\n      seuils: seuil,\n      codif_auto:\n        processed_response.filter((d) =&gt; d.IC &gt; seuil).length /\n        processed_response.length,\n      accuracies: get_accuracies_from_threshold(processed_response, i, {\n        round_int: 15\n      })\n    });\n  }\n  return newArray;\n}\n\n\n\n\n\n\n\n\ndata = db.query(\n  `\nSELECT text_description, type_, nature, surface, event, code\nFROM liasses\n`\n)\n\n\n\n\n\n\n\ntransformedData = data.reduce((acc, obj) =&gt; {\n  for (const [key, value] of Object.entries(obj)) {\n    if (!acc.hasOwnProperty(key)) {\n      acc[key] = [];\n    }\n    acc[key].push(value);\n  }\n  return acc;\n}, {})\n\n\n\n\n\n\n\ndb = DuckDBClient.of({\n  liasses: await csvfile.csv()\n})\n\n\n\n\n\n\n\nprocessed_response = Object.keys(response.IC).map((key) =&gt; ({\n  IC: response.IC[key] == 1 ? response.IC[key] - 1e-16 : response.IC[key],\n  Probability: response.Probability[key],\n  Prediction: response.Prediction[key],\n  Code: response.Code[key],\n  Result: response.Result[key],\n  Lib: response.Lib[key]\n}))\n\n\n\n\n\n\n\nresponse = queryBatchApi(username, password, data)\n\n\n\n\n\n\n\nsubset = processed_response.filter((d) =&gt; d.IC &gt; Seuil)\n\n\n\n\n\n\n\nquantiles = Array.from({ length: 101 }, (_, i) =&gt; i/100) // Array with quantile values from 0 to 1\n\n\n\n\n\n\n\nseuils = quantiles.map((quantile) =&gt;\n  d3.quantile(\n    processed_response.map((d) =&gt; d.IC),\n    1 - quantile\n  )\n)\n\n\n\n\n\n\n\ncount_errors = valueCounts(\n  subset.filter((d) =&gt; 1 - d.Result).map((d) =&gt; d.Code)\n)\n\n\n\n\n\n\n\n\nasync function queryBatchApi(username, password, data) {\n  const url = \"https://codification-ape.lab.sspcloud.fr/evaluation\";\n\n  // Create the request body\n  const request_body = data.reduce((acc, obj) =&gt; {\n    for (const [key, value] of Object.entries(obj)) {\n      if (!acc.hasOwnProperty(key)) {\n        acc[key] = [];\n      }\n      acc[key].push(value);\n    }\n    return acc;\n  }, {});\n\n  const response = await fetch(url, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Basic ${btoa(`${username}:${password}`)}`\n    },\n    body: JSON.stringify(request_body)\n  });\n\n  if (response.ok) {\n    return response.json();\n  } else if (response.status === 400) {\n    console.log((await response.json()).detail);\n  } else {\n    console.log(\"Error occurred while querying the API.\");\n    return response;\n  }\n}\n\n\n\n\n\n\n\nfunction get_accuracies_from_threshold(\n  data,\n  threshold,\n  { round_int = 2 } = {}\n) {\n  let acc = d3.mean(data.filter((d) =&gt; d.IC &gt; threshold).map((d) =&gt; d.Result));\n  acc = acc === undefined ? 1 : round(acc, round_int);\n  return acc;\n}\n\n\n\n\n\n\n\nfunction round(d, int) {\n  return Math.round(d * 10 ** int) / 10 ** int;\n}\n\n\n\n\n\n\n\nfunction valueCounts(array, { freq = false } = {}) {\n  const counts = {};\n\n  for (let i = 0; i &lt; array.length; i++) {\n    const value = array[i];\n\n    if (counts[value]) {\n      counts[value]++;\n    } else {\n      counts[value] = 1;\n    }\n  }\n\n  const result = [];\n\n  const arrayLength = array.length;\n  for (const value in counts) {\n    const frequency = freq ? counts[value] / arrayLength : counts[value];\n    result.push({ value: value, frequency: frequency });\n  }\n  result.sort((a, b) =&gt; b.frequency - a.frequency); // Sort by frequency in descending order\n\n  return result;\n}\n\n\n\n\n\n\n\n\nPlot = require(\"https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6.8/dist/plot.umd.min.js\")"
  },
  {
    "objectID": "website/index.html",
    "href": "website/index.html",
    "title": "Analyse du mod√®le de codification de l‚ÄôAPE",
    "section": "",
    "text": "md`\nLe mod√®le en cours d'√©valuation est le mod√®le **${infos.Model_name}**, version **${infos.Model_version}**.\n`"
  },
  {
    "objectID": "website/index.html#performance-du-mod√®le",
    "href": "website/index.html#performance-du-mod√®le",
    "title": "Analyse du mod√®le de codification de l‚ÄôAPE",
    "section": "Performance du mod√®le",
    "text": "Performance du mod√®le\n\nhtml`\n&lt;table&gt;\n  &lt;tr&gt;\n    &lt;th&gt;&lt;/th&gt;\n    &lt;th&gt;Level 1&lt;/th&gt;\n    &lt;th&gt;Level 2&lt;/th&gt;\n    &lt;th&gt;Level 3&lt;/th&gt;\n    &lt;th&gt;Level 4&lt;/th&gt;\n    &lt;th&gt;Level 5&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;strong&gt;GU&lt;/strong&gt;&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_1_gu*100, 2)}%&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_2_gu*100, 2)}%&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_3_gu*100, 2)}%&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_4_gu*100, 2)}%&lt;/td&gt;\n    &lt;td class=\"rounded-cell\"&gt;&lt;strong&gt;${round(infos.Metrics.accuracy_level_5_gu*100, 2)}%&lt;/strong&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;&lt;strong&gt;Train&lt;/strong&gt;&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_1*100, 2)}%&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_2*100, 2)}%&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_3*100, 2)}%&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics.accuracy_level_4*100, 2)}%&lt;/td&gt;\n    &lt;td class=\"rounded-cell\"&gt;&lt;strong&gt;${round(infos.Metrics.accuracy_level_5*100, 2)}%&lt;/strong&gt;&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n`"
  },
  {
    "objectID": "website/index.html#r√©sultats-du-mod√®le-sur-les-tests",
    "href": "website/index.html#r√©sultats-du-mod√®le-sur-les-tests",
    "title": "Analyse du mod√®le de codification de l‚ÄôAPE",
    "section": "R√©sultats du mod√®le sur les tests",
    "text": "R√©sultats du mod√®le sur les tests\n\nhtml`\n&lt;table&gt; \n  &lt;tr&gt;\n    &lt;th&gt;Test&lt;/th&gt;\n    &lt;th&gt;Result&lt;/th&gt;\n    &lt;th&gt;IC&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 1&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 1 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 1 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 1 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 2&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 2 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 2 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 2 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 3&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 3 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 3 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 3 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 4&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 4 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 4 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 4 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 5&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 5 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 5 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 5 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 6&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 6 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 6 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 6 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 7&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 7 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 7 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 7 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 8&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 8 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 8 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 8 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 9&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 9 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 9 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 9 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 10&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 10 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 10 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 10 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 11&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 11 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 11 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 11 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 12&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 12 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 12 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 12 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 13&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 13 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 13 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 13 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 14&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 14 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 14 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 14 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 15&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 15 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 15 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 15 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 16&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 16 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 16 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 16 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 17&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 17 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 17 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 17 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 18&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 18 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 18 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 18 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 19&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 19 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 19 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 19 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Test 20&lt;/td&gt;\n    &lt;td class=\"${infos.Metrics['Test 20 - Result'].toLowerCase() === 'passed' ? 'passed' : 'failed'}\"&gt;${infos.Metrics['Test 20 - Result']}&lt;/td&gt;\n    &lt;td&gt;${round(infos.Metrics['Test 20 - IC'], 4)}&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n`\n\n\n\n\n\n\n\nfunction round(d, int) {\n  return Math.round(d * 10 ** int) / 10 ** int;\n}"
  },
  {
    "objectID": "website/index.html#licence",
    "href": "website/index.html#licence",
    "title": "Analyse du mod√®le de codification de l‚ÄôAPE",
    "section": "Licence",
    "text": "Licence\nThis work is licensed under the Apache License 2.0.\nSee the code on Github.\n\n\n\n\n\n\nhtml`\n&lt;style&gt;\n  table {\n    width: 100%;\n  }\n&lt;/style&gt;\n`"
  }
]